Parameters:
  BucketName: 
    Description: Bucket name for e-commerce site bucket
    Type: String
    Default: tyler-ecp-project-test

Resources: 
  EcpProjectVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      InstanceTenancy: "default"
      Tags:
      - Key: "Name"
        Value: "EcpProjectVPC" 

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref "EcpProjectVPC"
      CidrBlock: "10.0.0.0/24"

  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref "EcpProjectVPC"
      CidrBlock: "10.0.1.0/24"

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref "EcpProjectVPC"

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref "EcpProjectVPC"
      InternetGatewayId: !Ref "InternetGateway"

  PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  PublicSub1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref "PublicSubnet1"

  PublicSub2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref "PublicSubnet2"

  NatGatewayEIP1:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP1.AllocationId
      SubnetId: !Ref "PublicSubnet1"

  NatGatewayEIP2:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP2.AllocationId
      SubnetId: !Ref "PublicSubnet2"

  PrivateSubnet1: 
     Type: "AWS::EC2::Subnet"
     Properties:
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref "EcpProjectVPC"
      CidrBlock: "10.0.2.0/24"
  
  PrivateSubnet2: 
     Type: "AWS::EC2::Subnet"
     Properties:
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref "EcpProjectVPC"
      CidrBlock: "10.0.3.0/24"

  DBSubnet1: 
     Type: "AWS::EC2::Subnet"
     Properties:
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref "EcpProjectVPC"
      CidrBlock: "10.0.4.0/24"
  
  DBSubnet2: 
     Type: "AWS::EC2::Subnet"
     Properties:
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref "EcpProjectVPC"
      CidrBlock: "10.0.5.0/24"

  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref "EcpProjectVPC"

  PrivateRoute:
    Type: "AWS::EC2::Route"
    DependsOn: NatGateway1
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSub1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref "PrivateSubnet1"
      RouteTableId: !Ref PrivateRouteTable

  PrivateSub2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref "PrivateSubnet2"
      RouteTableId: !Ref PrivateRouteTable

  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS Mysql
      DBSubnetGroupName: DBSubnetGroup
      SubnetIds: 
         - !Ref "DBSubnet1"  
         - !Ref "DBSubnet2"

  MyDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS instance
      VpcId: !Ref EcpProjectVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !GetAtt WebServerSecurityGroup.GroupId

  MyRDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: ecp-rds
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: mysql
      MasterUsername: admin
      MasterUserPassword: password
      VPCSecurityGroups:
        - !Ref MyDBSecurityGroup
      AvailabilityZone: us-east-1a  
      DBSubnetGroupName: !Ref DBSubnetGroup
      MultiAZ: false

  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Ref "BucketName"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    Properties:
      GroupName: web-server-sg
      GroupDescription: Allow SSH and HTTP
      VpcId: !Ref EcpProjectVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        CidrIp: 0.0.0.0/0

  SetupLambdaRDSEC2Instance: 
    Type: "AWS::EC2::Instance"
    Properties: 
      ImageId: ami-04823729c75214919
      InstanceType: t2.micro
      IamInstanceProfile: LabInstanceProfile
      NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: true
          SubnetId: !Ref PublicSubnet1
          GroupSet: [!Ref WebServerSecurityGroup]
      KeyName: vockey
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y  
          sudo yum install -y git
          git clone https://github.com/TylerKuick/ECP_Website
          sudo amazon-linux-extras install epel -y

          #Setup DB and populate DB tables 
          sudo yum install mariadb -y
          mysql --version
          aws rds wait db-instance-available --db-instance-identifier ecp-rds --region us-east-1
          export DBHOST=$(aws rds describe-db-instances --db-instance-identifier ecp-rds --query 'DBInstances[0].Endpoint.Address' --region us-east-1 --output text)
          echo $DBHOST
          mysql --defaults-file=/ECP_Website/back-end/.my.cnf -u admin -h "$DBHOST" -e "CREATE DATABASE ecp_dev;"
          mysql --defaults-file=/ECP_Website/back-end/.my.cnf -u admin -h "$DBHOST" ecp_dev < /ECP_Website/db_dump/ecp_dev_products.sql
          mysql --defaults-file=/ECP_Website/back-end/.my.cnf -u admin -h "$DBHOST" ecp_dev < /ECP_Website/db_dump/ecp_dev_customers.sql
          mysql --defaults-file=/ECP_Website/back-end/.my.cnf -u admin -h "$DBHOST" ecp_dev < /ECP_Website/db_dump/ecp_dev_carts.sql
          mysql --defaults-file=/ECP_Website/back-end/.my.cnf -u admin -h "$DBHOST" ecp_dev < /ECP_Website/db_dump/ecp_dev_cartitems.sql

          #Copy Lambda Functions to S3 Bucket
          aws s3 cp /ECP_Website/lambda_functions s3://${BucketName} --recursive    
          
          #Shutdown instance after setup
          sudo shutdown now -h
      Tags: 
        - Key: Name
          Value: Setup Instance
        
  WebServerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DeletionPolicy: Delete
    Properties:
      LaunchTemplateName: web-server-launchtemp
      LaunchTemplateData:
        ImageId: ami-04823729c75214919
        InstanceType: t2.micro
        IamInstanceProfile:
          Arn: arn:aws:iam::638821506583:instance-profile/LabInstanceProfile
        KeyName: vockey
        NetworkInterfaces: 
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !Ref WebServerSecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags: 
              - Key: Name
                Value: Web Server
        UserData: 
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo yum update -y
            sudo amazon-linux-extras install epel -y
            sudo yum install stress -y
            sudo yum install -y httpd
            sudo systemctl start httpd
            sudo systemctl enable httpd
            sudo yum install -y git
            sudo yum install -y curl
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install 16.0.0
            git clone https://github.com/TylerKuick/ECP_Website

            #Set Backend API URL to API Gateway
            #export API_ID=$(aws apigateway get-rest-apis --query "items[0].id" --region us-east-1 --output text)
            #export API_URL="https://$API_ID.execute-api.us-east-1.amazonaws.com/dev"
            #echo "'$API_URL'" | sudo tee -a .env
            
            #Build and copy files to Apache Server files
            cd ./ECP_Website/front-end
            sudo chmod +x node_modules/.bin/vite
            npm i
            npm run build 
            sudo cp -r dist/* /var/www/html
            sudo systemctl restart httpd
      
          
  WebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref EcpProjectVPC
      TargetType: instance
      HealthCheckPath: /index.html
      HealthCheckTimeoutSeconds: 110
      HealthCheckIntervalSeconds: 120
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: WebTG

  WebASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DeletionPolicy: Delete
    Properties:
      MinSize: '2'
      MaxSize: '4'
      DesiredCapacity: '2'
      LaunchTemplate:
        LaunchTemplateId: !Ref WebServerLaunchTemplate
        Version: !GetAtt WebServerLaunchTemplate.LatestVersionNumber
      HealthCheckType: ELB
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      TargetGroupARNs: 
        - !Ref WebTargetGroup

  WebScalingPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      PolicyType: TargetTrackingScaling
      EstimatedInstanceWarmup: 400
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebASG
      TargetTrackingConfiguration: 
        PredefinedMetricSpecification: 
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50

  WebALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      Name: WebALB
      SecurityGroups:
      - !Ref WebServerSecurityGroup
      Subnets: 
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: WebALB

  WebALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebTargetGroup
      LoadBalancerArn: !Ref WebALB

  # AppServerSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   DeletionPolicy: Delete
  #   Properties:
  #     GroupName: app-server-sg
  #     GroupDescription: Allow SSH, HTTP, and Port 3001 Access
  #     VpcId: !Ref EcpProjectVPC
  #     SecurityGroupIngress:
  #     - IpProtocol: tcp
  #       FromPort: 80
  #       ToPort: 80
  #       SourceSecurityGroupId: !GetAtt WebServerSecurityGroup.GroupId
  #     - IpProtocol: tcp
  #       FromPort: 3001
  #       ToPort: 3001
  #       CidrIp: 0.0.0.0/0
  #     - IpProtocol: tcp
  #       FromPort: 22
  #       ToPort: 22
  #       SourceSecurityGroupId: !GetAtt WebServerSecurityGroup.GroupId

  # AppServerLaunchTemplate:
  #   Type: AWS::EC2::LaunchTemplate
  #   DeletionPolicy: Delete
  #   Properties:
  #     LaunchTemplateName: app-server-launchtemp
  #     LaunchTemplateData:
  #       ImageId: ami-04823729c75214919
  #       InstanceType: t2.micro
  #       IamInstanceProfile:
  #         Arn: arn:aws:iam::767397761895:instance-profile/LabInstanceProfile
  #       KeyName: vockey
  #       NetworkInterfaces: 
  #         - DeviceIndex: 0
  #           AssociatePublicIpAddress: false
  #           Groups:
  #             - !Ref AppServerSecurityGroup
  #       UserData: 
  #         Fn::Base64: !Sub |
  #           #!/bin/bash
  #           sudo yum update -y
  #           sudo amazon-linux-extras install epel -y
  #           sudo yum install stress -y
  #           sudo yum install -y git
  #           sudo yum install -y curl
  #           sudo yum install mariadb -y
  #           mysql --version
  #           curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
  #           export NVM_DIR="$HOME/.nvm"
  #           [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
  #           nvm install 16.0.0
  #           sudo git clone https://github.com/TylerKuick/ECP_Website
            
  #           cd ./ECP_Website/back-end
            
  #           export DBHOST=$(aws rds describe-db-instances --db-instance-identifier ecp-rds --query 'DBInstances[0].Endpoint.Address' --region us-east-1 --output text)
  #           mysql --defaults-file=/ECP_Website/back-end/.my.cnf -u admin -h "$DBHOST" -e "CREATE DATABASE ecp_dev;"
  #           echo "'$DBHOST'" | sudo tee -a .env

  #           sudo chmod +x node_modules/.bin/nodemon
  #           npm i 
  #           npm install pm2 -g
  #           pm2 start index.js

  # AppASG:
  #   Type: AWS::AutoScaling::AutoScalingGroup
  #   DeletionPolicy: Delete
  #   Properties:
  #     MinSize: '2'
  #     MaxSize: '2'
  #     DesiredCapacity: '2'
  #     LaunchTemplate:
  #       LaunchTemplateId: !Ref AppServerLaunchTemplate
  #       Version: !GetAtt AppServerLaunchTemplate.LatestVersionNumber
  #     HealthCheckType: ELB
  #     VPCZoneIdentifier:
  #       - !Ref PrivateSubnet1
  #       - !Ref PrivateSubnet2
  #     TargetGroupARNs: 
  #       - !Ref AppTargetGroup

  # AppScalingPolicy:
  #   Type: 'AWS::AutoScaling::ScalingPolicy'
  #   Properties:
  #     PolicyType: TargetTrackingScaling
  #     AdjustmentType: ChangeInCapacity
  #     AutoScalingGroupName: !Ref AppASG
  #     TargetTrackingConfiguration: 
  #       PredefinedMetricSpecification: 
  #         PredefinedMetricType: ASGAverageCPUUtilization
  #       TargetValue: 20

  # AppTargetGroup:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     VpcId: !Ref EcpProjectVPC
  #     TargetType: instance
  #     HealthCheckPath: /
  #     HealthCheckTimeoutSeconds: 110
  #     HealthCheckIntervalSeconds: 120
  #     Port: 3001
  #     Protocol: HTTP
  #     Tags:
  #       - Key: Name
  #         Value: AppTG

  # AppALB:
  #   Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  #   Properties:
  #     Type: application
  #     Scheme: internal
  #     Name: AppALB
  #     SecurityGroups:
  #     - !Ref AppServerSecurityGroup
  #     Subnets: 
  #     - !Ref PrivateSubnet1
  #     - !Ref PrivateSubnet2
  #     Tags:
  #       - Key: Name
  #         Value: AppALB

  # AppALBListener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     Protocol: HTTP
  #     Port: 80
  #     DefaultActions:
  #       - Type: forward
  #         TargetGroupArn: !Ref AppTargetGroup
  #     LoadBalancerArn: !Ref AppALB

Outputs: 
  S3Bucket: 
    Description: S3 Bucket Name for Lambda Codes
    Value: !Ref S3Bucket
    Export: 
      Name: !Sub "${AWS::StackName}-S3Bucket"
  WebServerSG:
    Description: Web Server Security Group ID
    Value: !Ref WebServerSecurityGroup
    Export: 
      Name: !Sub "${AWS::StackName}-WebServerSecurityGroup"
  PublicSub1:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1 
    Export: 
      Name: !Sub "${AWS::StackName}-PublicSubnet1"
  PublicSub2:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2
    Export: 
      Name: !Sub "${AWS::StackName}-PublicSubnet2"
  PrivateSub1:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export: 
      Name: !Sub "${AWS::StackName}-PrivateSubnet1"
  PrivateSub2:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2
    Export: 
      Name: !Sub "${AWS::StackName}-PrivateSubnet2"
  DBSub1:
    Description: DB Subnet 1 ID 
    Value: !Ref DBSubnet1
    Export: 
      Name: !Sub "${AWS::StackName}-DBSubnet1"
  DBSub2:
    Description: DB Subnet 2 ID
    Value: !Ref DBSubnet2
    Export: 
      Name: !Sub "${AWS::StackName}-DBSubnet2"
  RDSEndpoint:
    Description: DB Endpoint Address
    Value: !GetAtt MyRDSInstance.Endpoint.Address
    Export: 
      Name: !Sub "${AWS::StackName}-RDSEndpoint"