Parameters: 
  ProjectStackName: 
    Description: Project Stack Name
    Type: String
    Default: "ProjectStack"
    MinLength: 1
    MaxLength: 255
  S3Bucket: 
    Description: Bucket name for e-commerce site bucket
    Type: String
    Default: tyler-ecp-project-test

Resources:
  # Product Lambda Functions
  getProducts:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function to get all products from RDS
      FunctionName: getProducts
      Role: arn:aws:iam::767397761895:role/LabRole
      Code: 
        S3Bucket: !Ref S3Bucket
        S3Key: product/get_products.zip
      Handler: get_products.lambda_handler
      Runtime: python3.11
      Timeout: 10
      VpcConfig: 
        SecurityGroupIds: 
        - Fn::ImportValue: !Sub "${ProjectStackName}-WebServerSecurityGroup"
        SubnetIds: 
        - Fn::ImportValue: !Sub "${ProjectStackName}-PublicSubnet1"
        - Fn::ImportValue: !Sub "${ProjectStackName}-PublicSubnet2" 
        - Fn::ImportValue: !Sub "${ProjectStackName}-PrivateSubnet1"
        - Fn::ImportValue: !Sub "${ProjectStackName}-PrivateSubnet2"
        - Fn::ImportValue: !Sub "${ProjectStackName}-DBSubnet1"
        - Fn::ImportValue: !Sub "${ProjectStackName}-DBSubnet2"
  postProducts:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function to post products to RDS
      FunctionName: postProducts
      Role: arn:aws:iam::767397761895:role/LabRole
      Code: 
        S3Bucket: !Ref S3Bucket
        S3Key: product/post_products.zip
      Handler: post_products.lambda_handler
      Runtime: python3.11
      Timeout: 10
      VpcConfig: 
        SecurityGroupIds: 
        - Fn::ImportValue: !Sub "${ProjectStackName}-WebServerSecurityGroup"
        SubnetIds: 
        - Fn::ImportValue: !Sub "${ProjectStackName}-PublicSubnet1"
        - Fn::ImportValue: !Sub "${ProjectStackName}-PublicSubnet2" 
        - Fn::ImportValue: !Sub "${ProjectStackName}-PrivateSubnet1"
        - Fn::ImportValue: !Sub "${ProjectStackName}-PrivateSubnet2"
        - Fn::ImportValue: !Sub "${ProjectStackName}-DBSubnet1"
        - Fn::ImportValue: !Sub "${ProjectStackName}-DBSubnet2"
  putProducts:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function to update products in RDS
      FunctionName: putProduct
      Role: arn:aws:iam::767397761895:role/LabRole
      Code: 
        S3Bucket: !Ref S3Bucket
        S3Key: product/put_product.zip
      Handler: put_product.lambda_handler
      Runtime: python3.11
      Timeout: 10
      VpcConfig: 
        SecurityGroupIds: 
        - Fn::ImportValue: !Sub "${ProjectStackName}-WebServerSecurityGroup"
        SubnetIds: 
        - Fn::ImportValue: !Sub "${ProjectStackName}-PublicSubnet1"
        - Fn::ImportValue: !Sub "${ProjectStackName}-PublicSubnet2" 
        - Fn::ImportValue: !Sub "${ProjectStackName}-PrivateSubnet1"
        - Fn::ImportValue: !Sub "${ProjectStackName}-PrivateSubnet2"
        - Fn::ImportValue: !Sub "${ProjectStackName}-DBSubnet1"
        - Fn::ImportValue: !Sub "${ProjectStackName}-DBSubnet2"
  deleteProducts:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function to delete products in RDS
      FunctionName: deleteProduct
      Role: arn:aws:iam::767397761895:role/LabRole
      Code: 
        S3Bucket: !Ref S3Bucket
        S3Key: product/delete_product.zip
      Handler: delete_product.lambda_handler
      Runtime: python3.11
      Timeout: 10
      VpcConfig: 
        SecurityGroupIds: 
        - Fn::ImportValue: !Sub "${ProjectStackName}-WebServerSecurityGroup"
        SubnetIds: 
        - Fn::ImportValue: !Sub "${ProjectStackName}-PublicSubnet1"
        - Fn::ImportValue: !Sub "${ProjectStackName}-PublicSubnet2" 
        - Fn::ImportValue: !Sub "${ProjectStackName}-PrivateSubnet1"
        - Fn::ImportValue: !Sub "${ProjectStackName}-PrivateSubnet2"
        - Fn::ImportValue: !Sub "${ProjectStackName}-DBSubnet1"
        - Fn::ImportValue: !Sub "${ProjectStackName}-DBSubnet2"

  # Cart Lambda Function
  getCarts:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function to get cart objects in RDS
      FunctionName: getCarts
      Role: arn:aws:iam::767397761895:role/LabRole
      Code: 
        S3Bucket: !Ref S3Bucket
        S3Key: cart/get_carts.zip
      Handler: get_carts.lambda_handler
      Runtime: python3.11
      Timeout: 10
      VpcConfig: 
        SecurityGroupIds: 
        - Fn::ImportValue: !Sub "${ProjectStackName}-WebServerSecurityGroup"
        SubnetIds: 
        - Fn::ImportValue: !Sub "${ProjectStackName}-PublicSubnet1"
        - Fn::ImportValue: !Sub "${ProjectStackName}-PublicSubnet2" 
        - Fn::ImportValue: !Sub "${ProjectStackName}-PrivateSubnet1"
        - Fn::ImportValue: !Sub "${ProjectStackName}-PrivateSubnet2"
        - Fn::ImportValue: !Sub "${ProjectStackName}-DBSubnet1"
        - Fn::ImportValue: !Sub "${ProjectStackName}-DBSubnet2"